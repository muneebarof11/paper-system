{"version":3,"sources":["webpack:///./resources/js/v1/Questions/components/islamiyat/forms/McqForm.jsx"],"names":["McqForm","props","state","options","hideTopicForm","bind","submitForm","addOption","removeOption","window","confirm","this","hideForm","index","last_option","length","push","setState","splice","e","preventDefault","form_data","require","serialize","document","querySelector","hash","question_rtl","alert","option_rtl","JSON","stringify","formData","FormData","key","append","addQuestion","endpoint","type","onSubmit","className","id","value","form","name","htmlFor","map","o","i","j","$helper","getAlphabet","onClick","Fragment","disabled","loading","Component","connect","questions","message","dispatch","hideQuestionForm"],"mappings":"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","file":"40.js","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport {addQuestion, hideQuestionForm} from \"../../../redux/Actions\";\n\nclass McqForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            options: [1]\n        };\n\n        this.hideTopicForm = this.hideTopicForm.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.addOption = this.addOption.bind(this);\n        this.removeOption = this.removeOption.bind(this);\n    }\n\n    hideTopicForm() {\n        const confirmation = window.confirm('Are you sure you want to cancel?');\n        if (!confirmation) return false;\n\n        this.props.hideForm(this.props.index);\n    }\n\n    addOption() {\n        let options = this.state.options;\n        let last_option = options[options.length-1] + 1;\n        options.push(last_option);\n        this.setState({options: options});\n    }\n\n    removeOption(index) {\n        let options = this.state.options;\n\n        if(options.length === 1) {\n            return false;\n        }\n\n        options.splice(index, 1);\n        this.setState({options: options});\n    }\n\n    submitForm(e) {\n        e.preventDefault();\n\n        const serialize = require('form-serialize');\n        let form = document.querySelector(`#sectionForm_${this.props.index}`);\n        let form_data = serialize(form, { hash: true });\n\n        if(!form_data.question_rtl) {\n            alert('Question statement is required');\n            return false;\n        }\n\n        if(!form_data.option_rtl) {\n            alert('At-least one option is required');\n            return false;\n        }\n\n        form_data['option_en'] = JSON.stringify(form_data['option_en']);\n        form_data['option_rtl'] = JSON.stringify(form_data['option_rtl']);\n\n        const formData = new FormData();\n        for (let key in form_data) {\n            formData.append(key, form_data[key]);\n        }\n\n        this.props.addQuestion(formData, this.props.endpoint, this.props.type, this.props.index);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.submitForm} className=\"mb-4 sectionForm\" id={`sectionForm_${this.props.index}`}>\n                <input type=\"hidden\" value={this.props.form} name=\"section_info\" />\n\n                <div className=\"row\">\n                    <div className=\"form-group col-md-12 row\">\n                        <select className=\"custom-select col-lg-11\" name=\"priority\" id=\"priority\">\n                            <option value=\"exercise\">Exercise</option>\n                            <option value=\"past_paper\">Past Paper</option>\n                            <option value=\"additional\">Additional</option>\n                        </select>\n                        <label className=\"col-lg-1 col-form-label\" htmlFor=\"priority\">Priority</label>\n                    </div>\n                </div>\n\n\n                <div className=\"row\">\n                    <div className=\"form-group col-lg-12 row urdu-font\">\n                        <label className=\"col-lg-1 col-form-label\" htmlFor={`question_rtl_${this.props.index}`}>سوال:</label>\n                        <div className=\"col-lg-11\"><input type=\"text\" className=\"form-control\" id={`question_rtl_${this.props.index}`} name=\"question_rtl\" /></div>\n                    </div>\n                </div>\n                {\n                    this.state.options.length > 0\n                        ? this.state.options.map((o, i) => {\n                            let j= i+1;\n                            return (\n                                <div className=\"row\">\n                                    <div className=\"form-group col-lg-12 row urdu-font\">\n                                        <label className=\"col-lg-1 col-form-label\"\n                                               htmlFor={`option_rtl_${j}`}>:{$helper.getAlphabet(i)}    آپشن\n                                        </label>\n                                        <div className=\"col-lg-7\">\n                                            <input type=\"text\" className=\"form-control\" id={`option_rtl_${j}`} name={`option_rtl[]`}/>\n                                        </div>\n                                        <div className=\"col-lg-1\">\n                                            <button type=\"button\" className=\"action-btn btn btn-warning float-right\" onClick={this.addOption}><i className=\"fa fa-plus-circle\"></i></button>\n                                        </div>\n                                        <div className=\"col-lg-1\">\n                                            <button type=\"button\" className={`${i === 0 ? 'd-none' : ''} action-btn btn btn-danger`} onClick={() => {this.removeOption(i)}}><i className=\"fa fa-minus-circle\"></i></button>\n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        })\n                        : <React.Fragment></React.Fragment>\n\n                }\n\n                <hr className=\"mt-3\" />\n\n                <div className=\"form-group row\">\n\n                    <div className=\"col-lg-6 row\">\n                        <button className=\"btn btn-primary col-lg-5\" type=\"submit\" disabled={this.props.loading}>\n                            {this.props.loading ? 'Saving...' : 'Save'}\n                        </button>\n                        <button className=\"btn btn-danger col-lg-5\" type=\"button\" onClick={this.hideTopicForm}>\n                            Cancel\n                        </button>\n                    </div>\n\n                    <div className=\"form-group col-md-6 row\">\n                        <label className=\"col-lg-3 col-form-label\" htmlFor=\"correct_option\">Correct Answer</label>\n                        <select className=\"custom-select col-lg-9\" name=\"correct_option\" id=\"correct_option\">\n                            {\n                                this.state.options.length > 0\n                                    ? this.state.options.map((o, i) => {\n                                        return <option value={$helper.getAlphabet(i)}>Option {$helper.getAlphabet(i)}</option>\n                                    })\n                                    : <option>Loading...</option>\n                            }\n                        </select>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.questions.loading,\n        message: state.questions.message,\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addQuestion: (formData, endpoint, type, index) => dispatch(addQuestion(dispatch, formData, endpoint, type, index)),\n        hideForm: (index) => dispatch(hideQuestionForm(dispatch, index))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(McqForm);\n"],"sourceRoot":""}