{"version":3,"sources":["webpack:///./resources/js/v1/Questions/components/math/forms/FillBlanksForms.jsx"],"names":["FillBlanksForms","props","submitForm","bind","hideTopicForm","e","preventDefault","form_data","require","serialize","document","querySelector","this","index","hash","question_en","question_rtl","alert","formData","FormData","key","append","addQuestion","endpoint","type","warning","window","confirm","hideForm","onSubmit","className","id","value","form","name","htmlFor","disabled","loading","onClick","Component","connect","state","questions","message","dispatch","hideQuestionForm"],"mappings":"o1CAIMA,E,sQACF,WAAYC,GAAO,a,4FAAA,UACf,cAAMA,IAEDC,WAAa,EAAKA,WAAWC,KAAhB,MAClB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,MAJN,E,gDAORE,GACPA,EAAEC,iBAEF,IAEIC,EAFcC,EAAQ,GAEVC,CADLC,SAASC,cAAT,uBAAuCC,KAAKX,MAAMY,QAC7B,CAAEC,MAAM,IAExC,IAAIP,EAAUQ,cAAgBR,EAAUS,aAEpC,OADAC,MAAM,0DACC,EAGX,IAAMC,EAAW,IAAIC,SACrB,IAAK,IAAIC,KAAOb,EACZW,EAASG,OAAOD,EAAKb,EAAUa,IAGnCR,KAAKX,MAAMqB,YAAYJ,EAAUN,KAAKX,MAAMsB,SAAUX,KAAKX,MAAMuB,KAAMZ,KAAKX,MAAMY,S,oCAGxEY,GAEV,IADqBC,OAAOC,QAAQ,oCACjB,OAAO,EAE1Bf,KAAKX,MAAM2B,SAAShB,KAAKX,MAAMY,S,+BAI/B,OACI,0BAAMgB,SAAUjB,KAAKV,WAAY4B,UAAU,mBAAmBC,GAAE,sBAAiBnB,KAAKX,MAAMY,QACxF,2BAAOW,KAAK,SAASQ,MAAOpB,KAAKX,MAAMgC,KAAMC,KAAK,iBAElD,yBAAKJ,UAAU,OACX,yBAAKA,UAAU,2BACX,2BAAOA,UAAU,0BAA0BK,QAAQ,YAAnD,YACA,4BAAQL,UAAU,yBAAyBI,KAAK,WAAWH,GAAG,YAC1D,4BAAQC,MAAM,YAAd,YACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,cAAd,iBAKZ,yBAAKF,UAAU,OACX,yBAAKA,UAAU,2BACX,2BAAOA,UAAU,0BAA0BK,QAAO,sBAAiBvB,KAAKX,MAAMY,QAA9E,aACA,yBAAKiB,UAAU,YAAW,2BAAON,KAAK,OAAOM,UAAU,eAAeC,GAAE,sBAAiBnB,KAAKX,MAAMY,OAASqB,KAAK,kBAEtH,yBAAKJ,UAAU,qCACX,yBAAKA,UAAU,YAAW,2BAAON,KAAK,OAAOM,UAAU,gCAAgCC,GAAE,uBAAkBnB,KAAKX,MAAMY,OAASqB,KAAK,kBACpI,2BAAOJ,UAAU,2CAA2CK,QAAO,uBAAkBvB,KAAKX,MAAMY,QAAhG,WAIR,wBAAIiB,UAAU,SAEd,yBAAKA,UAAU,kBAEX,yBAAKA,UAAU,gBACX,4BAAQA,UAAU,2BAA2BN,KAAK,SAASY,SAAUxB,KAAKX,MAAMoC,SAC3EzB,KAAKX,MAAMoC,QAAU,YAAc,QAExC,4BAAQP,UAAU,0BAA0BN,KAAK,SAASc,QAAS1B,KAAKR,eAAxE,WAKJ,yBAAK0B,UAAU,2BACX,2BAAOA,UAAU,0BAA0BK,QAAO,yBAAoBvB,KAAKX,MAAMY,QAAjF,kBACA,yBAAKiB,UAAU,YAAW,2BAAON,KAAK,OAAOM,UAAU,eAAeC,GAAE,yBAAoBnB,KAAKX,MAAMY,OAASqB,KAAK,4B,8BA7E/GK,aAmGfC,uBAdS,SAAAC,GACpB,MAAO,CACHJ,QAASI,EAAMC,UAAUL,QACzBM,QAASF,EAAMC,UAAUC,YAIN,SAAAC,GACvB,MAAO,CACHtB,YAAa,SAACJ,EAAUK,EAAUC,EAAMX,GAA3B,OAAqC+B,EAAStB,YAAYsB,EAAU1B,EAAUK,EAAUC,EAAMX,KAC3Ge,SAAU,SAACf,GAAD,OAAW+B,EAASC,YAAiBD,EAAU/B,QAIlD2B,CAA6CxC","file":"42.js","sourcesContent":["import React, { Component } from 'react';\nimport {addQuestion, hideQuestionForm} from \"../../../redux/Actions\";\nimport {connect} from \"react-redux\";\n\nclass FillBlanksForms extends Component {\n    constructor(props) {\n        super(props);\n\n        this.submitForm = this.submitForm.bind(this);\n        this.hideTopicForm = this.hideTopicForm.bind(this);\n    }\n\n    submitForm(e) {\n        e.preventDefault();\n\n        const serialize = require('form-serialize');\n        let form = document.querySelector(`#sectionForm_${this.props.index}`);\n        let form_data = serialize(form, { hash: true });\n\n        if(!form_data.question_en && !form_data.question_rtl) {\n            alert('Either English or Urdu question statement is required');\n            return false;\n        }\n\n        const formData = new FormData();\n        for (let key in form_data) {\n            formData.append(key, form_data[key]);\n        }\n\n        this.props.addQuestion(formData, this.props.endpoint, this.props.type, this.props.index);\n    }\n\n    hideTopicForm(warning) {\n        const confirmation = window.confirm('Are you sure you want to cancel?');\n        if (!confirmation) return false;\n\n        this.props.hideForm(this.props.index);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.submitForm} className=\"mb-4 sectionForm\" id={`sectionForm_${this.props.index}`}>\n                <input type=\"hidden\" value={this.props.form} name=\"section_info\" />\n\n                <div className=\"row\">\n                    <div className=\"form-group col-md-6 row\">\n                        <label className=\"col-lg-3 col-form-label\" htmlFor=\"priority\">Priority</label>\n                        <select className=\"custom-select col-lg-9\" name=\"priority\" id=\"priority\">\n                            <option value=\"exercise\">Exercise</option>\n                            <option value=\"past_paper\">Past Paper</option>\n                            <option value=\"additional\">Additional</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"form-group col-lg-6 row\">\n                        <label className=\"col-form-label col-lg-3\" htmlFor={`question_en_${this.props.index}`}>Question:</label>\n                        <div className=\"col-lg-9\"><input type=\"text\" className=\"form-control\" id={`question_en_${this.props.index}`} name=\"question_en\" /></div>\n                    </div>\n                    <div className=\"form-group col-lg-6 row urdu-font\">\n                        <div className=\"col-lg-9\"><input type=\"text\" className=\"form-control text-align-right\" id={`question_rtl_${this.props.index}`} name=\"question_rtl\" /></div>\n                        <label className=\"col-lg-3 col-form-label text-align-right\" htmlFor={`question_rtl_${this.props.index}`}>سوال:</label>\n                    </div>\n                </div>\n\n                <hr className=\"mt-3\" />\n\n                <div className=\"form-group row\">\n\n                    <div className=\"col-lg-6 row\">\n                        <button className=\"btn btn-primary col-lg-5\" type=\"submit\" disabled={this.props.loading}>\n                            {this.props.loading ? 'Saving...' : 'Save'}\n                        </button>\n                        <button className=\"btn btn-danger col-lg-5\" type=\"button\" onClick={this.hideTopicForm}>\n                            Cancel\n                        </button>\n                    </div>\n\n                    <div className=\"form-group col-md-6 row\">\n                        <label className=\"col-lg-3 col-form-label\" htmlFor={`correct_option_${this.props.index}`}>Correct Answer</label>\n                        <div className=\"col-lg-9\"><input type=\"text\" className=\"form-control\" id={`correct_option_${this.props.index}`} name=\"correct_option\" /></div>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.questions.loading,\n        message: state.questions.message,\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addQuestion: (formData, endpoint, type, index) => dispatch(addQuestion(dispatch, formData, endpoint, type, index)),\n        hideForm: (index) => dispatch(hideQuestionForm(dispatch, index))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FillBlanksForms);\n"],"sourceRoot":""}