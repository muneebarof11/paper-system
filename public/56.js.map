{"version":3,"sources":["webpack:///./resources/js/v1/sections/components/SectionForm.jsx"],"names":["SectionForm","props","sectionTopicSubmit","bind","e","preventDefault","data","require","serialize","document","querySelector","this","index","hash","eng_name","rlt_name","alert","section_info","JSON","parse","formData","FormData","append","seid","subject_code","stid","cid","suid","addTopic","onSubmit","className","id","type","value","form","name","htmlFor","disabled","loading","onClick","hideTopicForm","PureComponent","connect","state","section","message","dispatch"],"mappings":"q1CAIMA,E,sQAEF,WAAYC,GAAO,a,4FAAA,UACf,cAAMA,IACDC,mBAAqB,EAAKA,mBAAmBC,KAAxB,MAFX,E,wDAKAC,GACfA,EAAEC,iBAEF,IAEIC,EAFcC,EAAQ,GAEfC,CADAC,SAASC,cAAT,uBAAuCC,KAAKV,MAAMW,QAClC,CAAEC,MAAM,IACnC,IAAIP,EAAKQ,WAAaR,EAAKS,SAEvB,OADAC,MAAM,6CACC,EAGX,IAAMC,EAAeC,KAAKC,MAAMb,EAAKW,cAC/BG,EAAW,IAAIC,SAErBD,EAASE,OAAO,YAAaL,EAAaM,MAC1CH,EAASE,OAAO,eAAgBL,EAAaO,cAC7CJ,EAASE,OAAO,WAAahB,EAAKQ,SAAYR,EAAKQ,SAAW,IAC9DM,EAASE,OAAO,WAAahB,EAAKS,SAAYT,EAAKS,SAAW,IAC9DK,EAASE,OAAO,mBAAoBL,EAAaQ,MACjDL,EAASE,OAAO,WAAYL,EAAaS,KACzCN,EAASE,OAAO,aAAcL,EAAaU,MAE3ChB,KAAKV,MAAM2B,SAASjB,KAAKV,MAAMW,MAAOQ,K,+BAGjC,WACL,OACI,0BAAMS,SAAUlB,KAAKT,mBAAoB4B,UAAU,mBAAmBC,GAAE,sBAAiBpB,KAAKV,MAAMW,QAChG,2BAAOoB,KAAK,SAASC,MAAOtB,KAAKV,MAAMiC,KAAMC,KAAK,iBAClD,yBAAKL,UAAU,kBACX,2BAAOA,UAAU,0BAA0BM,QAAQ,YAAnD,iBACA,yBAAKN,UAAU,YAAW,2BAAOE,KAAK,OAAOF,UAAU,eAAeC,GAAG,WAAWI,KAAK,eAE7F,yBAAKL,UAAU,kBACX,2BAAOA,UAAU,0BAA0BM,QAAQ,YAAnD,cACA,yBAAKN,UAAU,YAAW,2BAAOE,KAAK,OAAOF,UAAU,gBAAgBC,GAAG,WAAWI,KAAK,eAE9F,yBAAKL,UAAU,kBACX,4BAAQA,UAAU,2BAA2BE,KAAK,SAASK,SAAU1B,KAAKV,MAAMqC,SAC3E3B,KAAKV,MAAMqC,QAAU,YAAc,QAExC,4BAAQR,UAAU,0BAA0BE,KAAK,SAASO,QAAS,WAAO,EAAKtC,MAAMuC,cAAc,EAAKvC,MAAMW,SAA9G,iB,8BAhDM6B,iBAuEXC,uBAdS,SAAAC,GACpB,MAAO,CACHL,QAASK,EAAMC,QAAQN,QACvBO,QAASF,EAAMC,QAAQC,YAIJ,SAAAC,GACvB,MAAO,CACHlB,SAAU,SAAChB,EAAOQ,GAAR,OAAqB0B,EAASlB,YAASkB,EAAUlC,EAAOQ,KAClEoB,cAAe,SAAC5B,GAAD,OAAWkC,EAASN,YAAcM,EAAUlC,QAIpD8B,CAA6C1C","file":"56.js","sourcesContent":["import React, { Component, PureComponent } from 'react';\nimport {connect} from \"react-redux\";\nimport {addTopic, hideTopicForm} from \"../redux/Actions\";\n\nclass SectionForm extends PureComponent {\n\n    constructor(props) {\n        super(props);\n        this.sectionTopicSubmit = this.sectionTopicSubmit.bind(this);\n    }\n\n    sectionTopicSubmit(e) {\n        e.preventDefault();\n\n        const serialize = require('form-serialize');\n        let form = document.querySelector(`#sectionForm_${this.props.index}`);\n        let data = serialize(form, { hash: true });\n        if(!data.eng_name && !data.rlt_name) {\n            alert('Either English or Urdu title is required');\n            return false;\n        }\n\n        const section_info = JSON.parse(data.section_info);\n        const formData = new FormData();\n\n        formData.append('parent_id', section_info.seid);\n        formData.append('subject_code', section_info.subject_code);\n        formData.append('eng_name', (data.eng_name) ? data.eng_name : '');\n        formData.append('rlt_name', (data.rlt_name) ? data.rlt_name : '');\n        formData.append('syllabus_type_id', section_info.stid);\n        formData.append('class_id', section_info.cid);\n        formData.append('subject_id', section_info.suid);\n\n        this.props.addTopic(this.props.index, formData);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.sectionTopicSubmit} className=\"sectionForm mb-5\" id={`sectionForm_${this.props.index}`}>\n                <input type=\"hidden\" value={this.props.form} name=\"section_info\" />\n                <div className=\"form-group row\">\n                    <label className=\"col-sm-4 col-form-label\" htmlFor=\"eng_name\">English title</label>\n                    <div className=\"col-sm-8\"><input type=\"text\" className=\"form-control\" id=\"eng_name\" name=\"eng_name\" /></div>\n                </div>\n                <div className=\"form-group row\">\n                    <label className=\"col-sm-4 col-form-label\" htmlFor=\"rlt_name\">Urdu title</label>\n                    <div className=\"col-sm-8\"><input type=\"text\" className=\" form-control\" id=\"rlt_name\" name=\"rlt_name\" /></div>\n                </div>\n                <div className=\"form-group row\">\n                    <button className=\"btn btn-primary col-lg-5\" type=\"submit\" disabled={this.props.loading}>\n                        {this.props.loading ? 'Saving...' : 'Save'}\n                    </button>\n                    <button className=\"btn btn-danger col-lg-5\" type=\"button\" onClick={() => {this.props.hideTopicForm(this.props.index)}}>\n                        Cancel\n                    </button>\n                </div>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.section.loading,\n        message: state.section.message\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addTopic: (index, formData) => dispatch(addTopic(dispatch, index, formData)),\n        hideTopicForm: (index) => dispatch(hideTopicForm(dispatch, index))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SectionForm);\n"],"sourceRoot":""}