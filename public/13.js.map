{"version":3,"sources":["webpack:///./resources/js/v1/Questions/components/islamiyat/listing/PISLGeneralQuestion.jsx"],"names":["PISLGeneralQuestion","props","state","q","id","en","statement","rtl","number","prepareQuestionData","bind","updateSelectedQuestions","this","key","type","only_display","selected_question","length","question_info","find","sq","questions_count","questions","allowed","total_allowed","checked","alert","formData","title","each_question_marks","ignore","question","form_type","setState","Fragment","className","validateBlankLineValue","onClick","style","fontSize","questionFontSize","display","dangerouslySetInnerHTML","createMarkup","blank_lines","renderBlankLines","html","__html","p","i","push","translations","t","qt","locale","question_statement","correct_answer","Component","connect","dispatch"],"mappings":"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","file":"13.js","sourcesContent":["import React, { Component } from 'react';\nimport {updateSelectedQuestions} from \"../../../redux/Actions\";\nimport {connect} from \"react-redux\";\n\nclass PISLGeneralQuestion extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            q: {\n                id: 0,\n                en: {\n                    statement: '',\n                },\n                rtl: {\n                    statement: '',\n                }\n            },\n            number: 0\n        };\n\n        this.prepareQuestionData = this.prepareQuestionData.bind(this);\n        this.updateSelectedQuestions = this.updateSelectedQuestions.bind(this);\n    }\n\n    componentDidMount() {\n        this.prepareQuestionData();\n    }\n\n\n    updateSelectedQuestions() {\n        const key =  this.props.type;\n\n        if(this.props.only_display) {\n            return false;\n        }\n\n        if(this.props.selected_question.length > 0) {\n            const question_info = this.props.selected_question.find(sq => sq.key == key);\n            const questions_count = question_info.questions ? question_info.questions.length : 0;\n            const allowed = this.props.total_allowed;\n            if(questions_count >= allowed && !this.state.q.checked) {\n                alert(`You can select maximum ${allowed} questions`);\n                return false;\n            }\n        }\n\n        const formData = {\n            key: key,\n            title: this.props.title,\n            each_question_marks: this.props.each_question_marks,\n            total_allowed: this.props.total_allowed,\n            ignore: this.props.ignore,\n            question: this.props.question,\n            form_type: this.props.form_type\n        };\n\n        this.props.updateSelectedQuestions(formData);\n\n        let checked = !this.state.q.checked;\n        let q = {\n            ...this.state.q,\n            checked: checked\n        };\n        this.setState({q})\n    }\n\n    render() {\n        let q = this.state.q;\n        let number = this.state.number;\n\n        return (\n            <React.Fragment>\n                <div className={`mt-2 ${!this.validateBlankLineValue() ? 'mb-2' : ''} col-sm-12 px-0 py-2 ${q.checked ? 'selected_question' : ''} question_row`} onClick={this.updateSelectedQuestions}>\n                    <div className={`arabic-font text-right col-sm-12`}>\n                        <h5 className=\"mb-2 text-right\"\n                            style={{fontSize: this.props.questionFontSize}}\n                        >\n                            <span style={{display: 'inline-block'}}>{number})</span> <div style={{display: 'inline-block'}} dangerouslySetInnerHTML={this.createMarkup(q.rtl.statement) } />\n                        </h5>\n                    </div>\n                </div>\n                {\n                    this.props.blank_lines\n                        ? this.renderBlankLines()\n                        : ''\n                }\n            </React.Fragment>\n        )\n    }\n\n    createMarkup(html) {\n        return {__html: `${html}`};\n    }\n\n    validateBlankLineValue() {\n        if(this.props.blank_lines === null\n            || this.props.blank_lines === ''\n            || this.props.blank_lines === 0\n            || this.props.blank_lines === '0') {\n            return false;\n        }\n\n        return true\n    }\n\n    renderBlankLines() {\n        if(this.props.type != 'general') return [];\n\n        let p = [];\n        if(!this.validateBlankLineValue()) return false;\n        for(let i=1; i<=this.props.blank_lines; i++)\n        {\n            p.push(<p className=\"blank_line\">&nbsp;</p>)\n        }\n        return p;\n    }\n\n    prepareQuestionData() {\n        let question = this.props.question;\n        let number = this.props.number;\n        if(question.length <= 0) return false;\n        if(typeof question.translations === typeof undefined) return false;\n\n        let q = this.state.q;\n\n        let i = 0, j = 1;\n        let t = question.translations.find(qt => qt.locale === 'en');\n\n        q.id = question.id;\n        if(t) {\n            q.en.statement = t.question_statement;\n            q.en.correct_answer = t.correct_answer;\n        }\n\n        /**\n         * loop through other language statement only if it exists\n         * English, Urdu & Isl (or some other) will not have this index\n         */\n        t = question.translations.find(qt => qt.locale === 'ur');\n        if (typeof t !== typeof undefined) {\n            q.rtl.statement = t.question_statement;\n            q.rtl.correct_answer = t.correct_answer;\n        }\n\n        this.setState({q: q, number: number})\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        selected_question: state.questions.selected_question\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateSelectedQuestions: (formData) => dispatch(updateSelectedQuestions(dispatch, formData))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PISLGeneralQuestion);\n"],"sourceRoot":""}