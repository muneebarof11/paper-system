{"version":3,"sources":["webpack:///./resources/js/v1/Questions/components/math/forms/MatchColumnsFrom.jsx"],"names":["MatchColumnsFrom","props","state","options","submitForm","bind","hideTopicForm","addOption","removeOption","this","last_option","length","push","setState","index","splice","e","preventDefault","form_data","require","serialize","document","querySelector","hash","question_en","question_rtl","alert","option_en","option_rtl","JSON","stringify","formData","FormData","key","append","addQuestion","endpoint","type","warning","window","confirm","hideForm","onSubmit","className","id","value","form","name","htmlFor","map","o","i","j","$helper","getAlphabet","onClick","Fragment","disabled","loading","Component","connect","questions","message","dispatch","hideQuestionForm"],"mappings":"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","file":"43.js","sourcesContent":["import React, { Component } from 'react';\nimport {addQuestion, hideQuestionForm} from \"../../../redux/Actions\";\nimport {connect} from \"react-redux\";\n\nclass MatchColumnsFrom extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            options: [1]\n        };\n\n        this.submitForm = this.submitForm.bind(this);\n        this.hideTopicForm = this.hideTopicForm.bind(this);\n        this.addOption = this.addOption.bind(this);\n        this.removeOption = this.removeOption.bind(this);\n    }\n\n    addOption() {\n        let options = this.state.options;\n        let last_option = options[options.length-1] + 1;\n        options.push(last_option);\n        this.setState({options: options});\n    }\n\n    removeOption(index) {\n        let options = this.state.options;\n\n        if(options.length === 1) {\n            return false;\n        }\n\n        options.splice(index, 1);\n        this.setState({options: options});\n    }\n\n    submitForm(e) {\n        e.preventDefault();\n\n        const serialize = require('form-serialize');\n        let form = document.querySelector(`#sectionForm_${this.props.index}`);\n        let form_data = serialize(form, { hash: true });\n\n        if(!form_data.question_en && !form_data.question_rtl) {\n            alert('Question statement is required');\n            return false;\n        }\n\n        if(!form_data.option_en && !form_data.option_rtl) {\n            alert('Column A & Column B are required');\n            return false;\n        }\n\n        form_data['option_en'] = JSON.stringify(form_data['option_en']);\n        form_data['option_rtl'] = JSON.stringify(form_data['option_rtl']);\n\n        const formData = new FormData();\n        for (let key in form_data) {\n            formData.append(key, form_data[key]);\n        }\n\n        this.props.addQuestion(formData, this.props.endpoint, this.props.type, this.props.index);\n    }\n\n    hideTopicForm(warning) {\n        const confirmation = window.confirm('Are you sure you want to cancel?');\n        if (!confirmation) return false;\n\n        this.props.hideForm(this.props.index);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.submitForm} className=\"mb-4 sectionForm\" id={`sectionForm_${this.props.index}`}>\n                <input type=\"hidden\" value={this.props.form} name=\"section_info\" />\n\n                <div className=\"row\">\n                    <div className=\"form-group col-md-6 row\">\n                        <label className=\"col-lg-3 col-form-label\" htmlFor=\"priority\">Priority</label>\n                        <select className=\"custom-select col-lg-9\" name=\"priority\" id=\"priority\">\n                            <option value=\"exercise\">Exercise</option>\n                            <option value=\"past_paper\">Past Paper</option>\n                            <option value=\"additional\">Additional</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"form-group col-lg-6 row\">\n                        <label className=\"col-form-label col-lg-3\" htmlFor={`question_en_${this.props.index}`}>Question:</label>\n                        <div className=\"col-lg-9\"><input type=\"text\" className=\"form-control\" id={`question_en_${this.props.index}`} name=\"question_en\" /></div>\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"form-group col-lg-12 text-center row\">\n                        <div className=\"col-lg-6\">Column A</div>\n                        <div className=\"col-lg-6\">Column B</div>\n                    </div>\n                </div>\n\n                {\n                    this.state.options.length > 0\n                        ? this.state.options.map((o, i) => {\n                            let j= i+1;\n                            return (\n                                <div className=\"row\">\n                                    <div className=\"form-group col-lg-6 row\">\n                                        <label className=\"col-form-label col-lg-3\" htmlFor={`option_en_${j}`}>{$helper.getAlphabet(i)}:</label>\n                                        <div className=\"col-lg-7\"><input type=\"text\" className=\"form-control\" id={`option_en_${j}`} name={`option_en[${i}]`} /></div>\n                                        <div className=\"col-lg-2\">\n                                            <button type=\"button\" className=\"action-btn btn btn-warning float-right\" onClick={this.addOption}><i className=\"fa fa-plus-circle\"></i></button>\n                                        </div>\n                                    </div>\n                                    <div className=\"form-group col-lg-6 row\">\n                                        <div className=\"col-lg-2\">\n                                            <button type=\"button\" className={`${i === 0 ? 'd-none' : ''} action-btn btn btn-danger`} onClick={() => {this.removeOption(i)}}><i className=\"fa fa-minus-circle\"></i></button>\n                                        </div>\n                                        <div className=\"col-lg-7\">\n                                            <input type=\"text\" className=\"form-control text-align-right\" id={`option_rtl_${j}`} name={`option_rtl[${i}]`}/></div>\n                                        <label className=\"col-lg-3 col-form-label text-align-right\"\n                                               htmlFor={`option_rtl_${j}`}>:{$helper.getAlphabet(i)} </label>\n                                    </div>\n                                </div>\n                            )\n                        })\n                        : <React.Fragment></React.Fragment>\n\n                }\n\n                <hr className=\"mt-3\" />\n\n                <div className=\"form-group row\">\n\n                    <div className=\"mx-auto col-lg-6 row\">\n                        <button className=\"btn btn-primary col-lg-5\" type=\"submit\" disabled={this.props.loading}>\n                            {this.props.loading ? 'Saving...' : 'Save'}\n                        </button>\n                        <button className=\"btn btn-danger col-lg-5\" type=\"button\" onClick={this.hideTopicForm}>\n                            Cancel\n                        </button>\n                    </div>\n\n                </div>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.questions.loading,\n        message: state.questions.message,\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addQuestion: (formData, endpoint, type, index) => dispatch(addQuestion(dispatch, formData, endpoint, type, index)),\n        hideForm: (index) => dispatch(hideQuestionForm(dispatch, index))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MatchColumnsFrom);\n"],"sourceRoot":""}