{"version":3,"sources":["webpack:///./resources/js/v1/Questions/components/english/EnglishQuestions.jsx"],"names":["BoxButton","lazy","McqForm","QuestionForm","TrueFalseForm","FillBlanksForms","MatchColumnsFrom","QuestionWithImage","EnglishQuestions","props","$helper","triggerLeftPaneCollapse","state","page_title","fetchData","bind","buttonClick","renderQuestions","renderForm","removeQuestionType","this","fetchQuestions","info","index","question_types","type_id","easyEncode","id","stid","syllabus_type_id","cid","class_id","suid","subject_id","seid","section_id","tid","topic_id","form","JSON","stringify","is_loading","showForm","window","confirm","formData","FormData","append","Fragment","className","role","length","map","type","i","name","data-toggle","href","aria-controls","aria-selected","title","data","aria-labelledby","is_default","onClick","aria-hidden","url","box_class","icon_class","box_title","parent_class","form_type","loading","component","questions","question","SpecificComponent","components","number","endpoint","PureComponent","connect","subject","subjects","find","s","easyDecode","message","s_code","code","dispatch","fetchQuestionsWithTypes","showQuestionForm"],"mappings":"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","file":"26.js","sourcesContent":["import React, {Component, lazy, PureComponent} from 'react';\n\nconst BoxButton = lazy( () => import(\"../../../common/BoxButton\"));\nconst McqForm = lazy(() => import(\"./forms/EngMcqForm\"));\nconst QuestionForm = lazy(() => import(\"./forms/EngQuestionForm\"));\nconst TrueFalseForm = lazy(() => import(\"../general/forms/TrueFalseForm\"));\nconst FillBlanksForms = lazy(() => import(\"../general/forms/FillBlanksForms\"));\nconst MatchColumnsFrom = lazy(() => import(\"../general/forms/MatchColumnsFrom\"));\nconst QuestionWithImage = lazy(() => import(\"../general/forms/QuestionWithImage\"));\n\nimport {\n    class_id,\n    eng_components as components,\n    section_id,\n    subject_id,\n    syllabus_type_id,\n    topic_id\n} from \"../../../params\";\nimport {connect} from \"react-redux\";\nimport {fetchQuestionsWithTypes, removeQuestionType, showQuestionForm} from \"../../redux/Actions\";\n\nclass EnglishQuestions extends PureComponent {\n\n    constructor(props) {\n\n        super(props);\n\n        $helper.triggerLeftPaneCollapse();\n\n        this.state = {\n            page_title: ''\n        };\n\n        this.fetchData = this.fetchData.bind(this);\n        this.buttonClick = this.buttonClick.bind(this);\n        this.renderQuestions = this.renderQuestions.bind(this);\n        this.renderForm = this.renderForm.bind(this);\n        this.removeQuestionType = this.removeQuestionType.bind(this);\n    }\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n    fetchData() {\n        this.props.fetchQuestions();\n    }\n\n    buttonClick(info, index) {\n        let all_data = this.state.question_types;\n        info = {\n            type_id: $helper.easyEncode(info.id),\n            stid: syllabus_type_id,\n            cid: class_id,\n            suid: subject_id,\n            seid: section_id,\n            tid: topic_id,\n        };\n\n        let form = {info: JSON.stringify(info), is_loading: false, index: index};\n        this.props.showForm(form, index);\n    }\n\n    removeQuestionType(id) {\n\n        if(!window.confirm('Are you sure?')) return false;\n\n        const formData = new FormData();\n        formData.append('section_id', section_id);\n        formData.append('id', $helper.easyEncode(id));\n\n        this.props.removeQuestionType(formData);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"container questions_container\">\n                        <nav>\n                            <div className=\"nav nav-tabs nav-fill\" id=\"nav-tabs\" role=\"tablist\">\n                                {\n                                    this.props.question_types.length > 0\n                                        ? this.props.question_types.map((type, i) => {\n                                            return (\n                                                <a\n                                                    className={`nav-item nav-link ${i === 0 ? 'active' : ''}`}\n                                                    id={`nav-${type.name}-tag`}\n                                                    data-toggle=\"tab\"\n                                                    href={`#nav-${type.name}`}\n                                                    role=\"tab\"\n                                                    aria-controls={`nav-${type.name}`}\n                                                    aria-selected={i === 0}\n                                                >\n                                                    {type.title}\n                                                </a>\n                                            )\n                                        })\n                                        : <React.Fragment></React.Fragment>\n                                }\n                            </div>\n                        </nav>\n\n                        <div className=\"tab-content\" id=\"nav-tabContent\">\n                            {\n                                this.props.question_types.length > 0\n                                    ? this.props.question_types.map((data, i) => {\n                                        i += 1;\n                                        let url = 'javascript:;';\n                                        return (\n                                            <div\n                                                className={`tab-pane fade ${i === 1 ? 'show active' : ''}`}\n                                                id={`nav-${data.name}`}\n                                                role=\"tabpanel\"\n                                                aria-labelledby={`nav-${data.name}-tag`}>\n\n                                                <div className=\"row\">\n                                                    <div className=\"col-lg-12 float-right\">\n                                                        {\n                                                            data.is_default === 0\n                                                                ? <button className=\"mb-3 btn btn-danger remove-btn float-right\" onClick={() => this.removeQuestionType(data.id)}>\n                                                                    Remove this Question type <i className=\"fa fa-minus-circle\" aria-hidden=\"true\"></i>\n                                                                </button>\n                                                                : ''\n                                                        }\n                                                    </div>\n                                                </div>\n\n                                                <BoxButton\n                                                    url=\"javascript\"\n                                                    box_class=\"transparent-box\"\n                                                    icon_class=\"fa-plus-circle\"\n                                                    box_title={`Add new Question`}\n                                                    parent_class=\"add-question-btn\"\n                                                    onClick={this.buttonClick}\n                                                    index={i - 1}\n                                                    data={data}\n                                                />\n                                                {\n                                                    this.renderForm(data, i)\n                                                }\n                                                {\n                                                    this.renderQuestions(data, data.form_type)\n                                                }\n\n                                            </div>\n                                        )\n                                    })\n                                    :\n                                    <h2 className=\"container pt-4 pb-4\">{this.props.loading ? 'Loading...' : 'No topics found!'}</h2>\n                            }\n                        </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n    renderQuestions(data, component) {\n        if (typeof this.props.questions[data.name] === typeof undefined) return <React.Fragment></React.Fragment>\n        if (typeof this.props.questions[data.name].data === typeof undefined) return '';\n\n        return this.props.questions[data.name].data.length > 0\n            ? this.props.questions[data.name].data.map((question, index) => {\n                // Correct! JSX type can be a capitalized variable.\n                const SpecificComponent = components[component];\n                return <SpecificComponent question={question} number={index + 1} type={data.name} />;\n            })\n            : this.props.questions[data.name].is_loading ? <h3>Loading</h3> :\n                <h3 className=\"mb-3\">Start adding new question(s)</h3>;\n    }\n\n    renderForm(data, i) {\n        let form = <React.Fragment></React.Fragment>;\n\n        if (!data.form) {\n            return form;\n        }\n\n        switch (data.form_type) {\n            case 'mcq':\n                form = <McqForm\n                    form={data.form.info}\n                    index={i - 1}\n                    type={data.name}\n                    endpoint=\"add-mcq-question\"\n                />\n                break;\n            case'general':\n                form = <QuestionForm\n                    form={data.form.info}\n                    index={i - 1}\n                    endpoint=\"add-general-question\"\n                    type={data.name}\n                />\n                break;\n            case 'true_false':\n                form = <TrueFalseForm\n                    form={data.form.info}\n                    index={i - 1}\n                    endpoint=\"add-general-question\"\n                    type={data.name}\n                />\n                break;\n            case 'banks':\n                form = <FillBlanksForms\n                    form={data.form.info}\n                    index={i - 1}\n                    endpoint=\"add-general-question\"\n                    type={data.name}\n                />\n                break;\n            case 'columns':\n                form = <MatchColumnsFrom\n                    form={data.form.info}\n                    index={i - 1}\n                    endpoint=\"add-match-column-question\"\n                    type={data.name}\n                />\n                break;\n            case 'image':\n                form = <QuestionWithImage\n                    form={data.form.info}\n                    index={i - 1}\n                    endpoint=\"add-image-question\"\n                    type={data.name}\n                />\n                break;\n        }\n\n        return form;\n    }\n}\n\nconst mapStateToProps = state => {\n    const subject = state.subject.subjects.find(s => $helper.easyDecode(subject_id) == s.id);\n    return {\n        loading: state.questions.loading,\n        message: state.questions.message,\n        question_types: state.questions.question_types,\n        questions: state.questions.questions,\n        s_code: subject.code,\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchQuestions: () => dispatch(fetchQuestionsWithTypes(dispatch, section_id)),\n        showForm: (form, index) => dispatch(showQuestionForm(dispatch, form, index)),\n        removeQuestionType: (form) => dispatch(removeQuestionType(dispatch, form))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EnglishQuestions);\n"],"sourceRoot":""}