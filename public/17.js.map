{"version":3,"sources":["webpack:///./resources/js/v1/Questions/components/urdu/listing/PRTLMCQ.jsx"],"names":["PRTLMCQ","props","state","q","id","checked","en","statement","options","rtl","number","prepareMcqQuestionData","bind","updateSelectedQuestions","this","each_question_marks","total_allowed","key","type","selected_question","length","question_info","find","sq","questions_count","questions","allowed","alert","formData","title","ignore","question","form_type","setState","className","onClick","style","fontSize","questionFontSize","map","o","i","optionsFontSize","$helper","getAlphabet","question_option","Fragment","translations","t","question_statement","filter","option","translation_id","correct_answer","Component","connect","dispatch"],"mappings":"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","file":"17.js","sourcesContent":["import React, { Component } from 'react';\nimport {fetchQuestionTypes, searchQuestions, updateSelectedQuestions} from \"../../../redux/Actions\";\nimport {connect} from \"react-redux\";\n\nclass PRTLMCQ extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            q: {\n                id: 0,\n                checked: false,\n                en: {\n                    statement: '',\n                    options: [],\n                },\n                rtl: {\n                    statement: '',\n                    options: [],\n                }\n            },\n            number: 0\n        };\n\n        this.prepareMcqQuestionData = this.prepareMcqQuestionData.bind(this);\n        this.updateSelectedQuestions = this.updateSelectedQuestions.bind(this);\n    }\n\n    componentDidMount() {\n        this.prepareMcqQuestionData();\n    }\n\n    updateSelectedQuestions() {\n        if(this.props.each_question_marks == 0 || this.props.total_allowed == 0) {\n            return false;\n        }\n\n        const key =  this.props.type;\n        if(this.props.selected_question.length > 0) {\n            const question_info = this.props.selected_question.find(sq => sq.key == key);\n            const questions_count = question_info.questions ? question_info.questions.length : 0;\n            const allowed = this.props.total_allowed;\n            if(questions_count >= allowed) {\n                alert(`You can select maximum ${allowed} questions`);\n                return false;\n            }\n        }\n\n        const formData = {\n            key: key,\n            title: this.props.title,\n            each_question_marks: this.props.each_question_marks,\n            total_allowed: this.props.total_allowed,\n            ignore: this.props.ignore,\n            question: this.props.question,\n            form_type: this.props.form_type\n        };\n\n        this.props.updateSelectedQuestions(formData);\n\n        let checked = !this.state.q.checked;\n        let q = {\n            ...this.state.q,\n            checked: checked\n        };\n        this.setState({q})\n    }\n\n    render() {\n        let q = this.state.q;\n        let number = this.state.number;\n\n        return (\n            <div className={`mt-2 mb-2 col-sm-12 px-0 py-2 ${q.checked ? 'selected_question' : ''} question_row mcq-question`} onClick={this.updateSelectedQuestions}>\n                <div className={`col-sm-12 urdu-font text-right ${q.rtl.statement.length > 0 ? '' : 'd-none' }`}>\n                    <h4 className=\"mb-2 text-right\"\n                        style={{fontSize: this.props.questionFontSize}}\n                    >{number})&nbsp;{q.rtl.statement}</h4>\n                    <div className=\"row mx-0\">\n                        {q.rtl.options.length > 0 ?\n                            q.rtl.options.map((o, i) => {\n                                return (\n                                    <div className={`col-sm-3 urdu-font text-right`} style={{fontSize: this.props.optionsFontSize}}>\n                                        <strong>{$helper.getAlphabet(i)}) </strong>\n                                        &nbsp;\n                                        {o.question_option}\n                                    </div>\n                                )\n                            })\n                            : <React.Fragment></React.Fragment>\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    prepareMcqQuestionData() {\n        let question = this.props.question;\n        let number = this.props.number;\n        if(question.length <= 0) return false;\n        if(typeof question.translations === typeof undefined) return false;\n\n        let q = this.state.q;\n        let i = 0, j = 1;\n        let t = question.translations[0];\n\n        // check its only urdu\n        if(t) {\n            q.rtl.statement = t.question_statement;\n\n            q.rtl.options = t.options.filter(option => {\n                return option.translation_id == t.id;\n            });\n            q.en.correct_answer = t.correct_answer;\n        }\n\n        q.id = question.id;\n        this.setState({q: q, number: number})\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        selected_question: state.questions.selected_question\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateSelectedQuestions: (formData) => dispatch(updateSelectedQuestions(dispatch, formData))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PRTLMCQ);\n"],"sourceRoot":""}