{"version":3,"sources":["webpack:///./resources/js/v1/Questions/components/forms/QPriorityFormRow.jsx","webpack:///./resources/js/v1/Questions/components/general/forms/McqForm.jsx","webpack:///./resources/js/v1/Questions/components/general/forms/QuestionForm.jsx"],"names":["Component","McqForm","props","state","options","hideTopicForm","bind","submitForm","addOption","removeOption","window","confirm","this","hideForm","index","last_option","length","push","setState","splice","e","preventDefault","form_data","require","serialize","document","querySelector","hash","question_en","alert","question_rtl","option_en","option_rtl","JSON","stringify","formData","FormData","key","append","addQuestion","endpoint","type","onSubmit","className","id","value","form","name","htmlFor","map","o","i","j","$helper","getAlphabet","onClick","Fragment","disabled","loading","connect","questions","message","dispatch","hideQuestionForm","QuestionForm","updateStatement","statement","editor","ClassicEditor","onChange","event","data","getData","config","ckEditor_config","ckEditor_rtl_config"],"mappings":"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","file":"33.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass QPriorityFormRow extends Component {\r\n    render() {\r\n        return ``;\r\n    }\r\n}\r\n\r\nexport default QPriorityFormRow;","import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport {addQuestion, hideQuestionForm} from \"../../../redux/Actions\";\nimport QPriorityFormRow from \"../../forms/QPriorityFormRow\";\n\nclass McqForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            options: [1]\n        };\n\n        this.hideTopicForm = this.hideTopicForm.bind(this);\n        this.submitForm = this.submitForm.bind(this);\n        this.addOption = this.addOption.bind(this);\n        this.removeOption = this.removeOption.bind(this);\n    }\n\n    hideTopicForm() {\n        const confirmation = window.confirm('Are you sure you want to cancel?');\n        if (!confirmation) return false;\n\n        this.props.hideForm(this.props.index);\n    }\n\n    addOption() {\n        let options = this.state.options;\n        let last_option = options[options.length-1] + 1;\n        options.push(last_option);\n        this.setState({options: options});\n    }\n\n    removeOption(index) {\n        let options = this.state.options;\n\n        if(options.length === 1) {\n            return false;\n        }\n\n        options.splice(index, 1);\n        this.setState({options: options});\n    }\n\n    submitForm(e) {\n        e.preventDefault();\n\n        const serialize = require('form-serialize');\n        let form = document.querySelector(`#sectionForm_${this.props.index}`);\n        let form_data = serialize(form, { hash: true });\n\n        if(!form_data.question_en) {\n            alert('English question is required');\n            return false;\n        }\n\n        if(!form_data.question_rtl) {\n            alert('Urdu question is required');\n            return false;\n        }\n\n        if(!form_data.option_en && !form_data.option_rtl) {\n            alert('Either English or Urdu option is required');\n            return false;\n        }\n\n        form_data['option_en'] = JSON.stringify(form_data['option_en']);\n        form_data['option_rtl'] = JSON.stringify(form_data['option_rtl']);\n\n        const formData = new FormData();\n        for (let key in form_data) {\n            formData.append(key, form_data[key]);\n        }\n\n        this.props.addQuestion(formData, this.props.endpoint, this.props.type, this.props.index);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.submitForm} className=\"mb-4 sectionForm\" id={`sectionForm_${this.props.index}`}>\n                <input type=\"hidden\" value={this.props.form} name=\"section_info\" />\n\n                <div className=\"row\">\n                    <div className=\"form-group col-md-6 row\">\n                        <label className=\"col-lg-3 col-form-label\" htmlFor=\"priority\">Priority</label>\n                        <select className=\"custom-select col-lg-9\" name=\"priority\" id=\"priority\">\n                            <option value=\"exercise\">Exercise</option>\n                            <option value=\"past_paper\">Past Paper</option>\n                            <option value=\"additional\">Additional</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"form-group col-lg-6 row\">\n                        <label className=\"col-form-label col-lg-3\" htmlFor={`question_en_${this.props.index}`}>Question:</label>\n                        <div className=\"col-lg-9\"><input type=\"text\" className=\"form-control\" id={`question_en_${this.props.index}`} name=\"question_en\" /></div>\n                    </div>\n                    <div className=\"form-group col-lg-6 row urdu-font\">\n                        <div className=\"col-lg-9\"><input type=\"text\" className=\"form-control text-align-right\" id={`question_rtl_${this.props.index}`} name=\"question_rtl\" /></div>\n                        <label className=\"col-lg-3 col-form-label text-align-right\" htmlFor={`question_rtl_${this.props.index}`}>سوال:</label>\n                    </div>\n                </div>\n                {\n                    this.state.options.length > 0\n                        ? this.state.options.map((o, i) => {\n                            let j= i+1;\n                            return (\n                                <div className=\"row\">\n                                    <div className=\"form-group col-lg-6 row\">\n                                        <label className=\"col-form-label col-lg-3\" htmlFor={`option_en_${j}`}>Option {$helper.getAlphabet(i)}:</label>\n                                        <div className=\"col-lg-7\"><input type=\"text\" className=\"form-control\" id={`option_en_${j}`} name={`option_en[]`} /></div>\n                                        <div className=\"col-lg-2\">\n                                            <button type=\"button\" className=\"action-btn btn btn-warning float-right\" onClick={this.addOption}><i className=\"fa fa-plus-circle\"></i></button>\n                                        </div>\n                                    </div>\n                                    <div className=\"form-group col-lg-6 row urdu-font\">\n                                        <div className=\"col-lg-2\">\n                                            <button type=\"button\" className={`${i === 0 ? 'd-none' : ''} action-btn btn btn-danger`} onClick={() => {this.removeOption(i)}}><i className=\"fa fa-minus-circle\"></i></button>\n                                        </div>\n                                        <div className=\"col-lg-7\">\n                                            <input type=\"text\" className=\"form-control text-align-right\" id={`option_rtl_${j}`} name={`option_rtl[]`}/></div>\n                                        <label className=\"col-lg-3 col-form-label text-align-right\"\n                                               htmlFor={`option_rtl_${j}`}>:{$helper.getAlphabet(i)} آپشن </label>\n                                    </div>\n                                </div>\n                            )\n                        })\n                        : <React.Fragment></React.Fragment>\n\n                }\n\n                <hr className=\"mt-3\" />\n\n                <div className=\"form-group row\">\n\n                    <div className=\"col-lg-6 row\">\n                        <button className=\"btn btn-primary col-lg-5\" type=\"submit\" disabled={this.props.loading}>\n                            {this.props.loading ? 'Saving...' : 'Save'}\n                        </button>\n                        <button className=\"btn btn-danger col-lg-5\" type=\"button\" onClick={this.hideTopicForm}>\n                            Cancel\n                        </button>\n                    </div>\n\n                    <div className=\"form-group col-md-6 row\">\n                        <label className=\"col-lg-3 col-form-label\" htmlFor=\"correct_option\">Correct Answer</label>\n                        <select className=\"custom-select col-lg-9\" name=\"correct_option\" id=\"correct_option\">\n                            {\n                                this.state.options.length > 0\n                                    ? this.state.options.map((o, i) => {\n                                        return <option value={$helper.getAlphabet(i)}>Option {$helper.getAlphabet(i)}</option>\n                                    })\n                                    : <option>Loading...</option>\n                            }\n                        </select>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.questions.loading,\n        message: state.questions.message,\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addQuestion: (formData, endpoint, type, index) => dispatch(addQuestion(dispatch, formData, endpoint, type, index)),\n        hideForm: (index) => dispatch(hideQuestionForm(dispatch, index))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(McqForm);\n","import React, { Component } from 'react';\n\nimport CKEditor from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from 'ckeditor5-classic-with-mathtype';\n\nimport {addQuestion, hideQuestionForm} from \"../../../redux/Actions\";\nimport {connect} from \"react-redux\";\nimport {ckEditor_config, ckEditor_rtl_config} from \"../../../../params\";\nimport QPriorityFormRow from \"./McqForm\";\n\nclass QuestionForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            question_en: '',\n            question_rtl: '',\n        };\n\n        this.submitForm = this.submitForm.bind(this);\n        this.hideTopicForm = this.hideTopicForm.bind(this);\n        this.updateStatement = this.updateStatement.bind(this);\n    }\n\n    hideTopicForm() {\n        const confirmation = window.confirm('Are you sure you want to cancel?');\n        if (!confirmation) return false;\n\n        this.props.hideForm(this.props.index);\n    }\n\n    updateStatement(statement, type) {\n        if(type === 'en') {\n            this.setState({question_en: statement})\n        } else {\n            this.setState({question_rtl: statement})\n        }\n    }\n\n    submitForm(e) {\n        e.preventDefault();\n\n        const serialize = require('form-serialize');\n        let form = document.querySelector(`#sectionForm_${this.props.index}`);\n\n        let form_data = serialize(form, { hash: true });\n\n        if(this.state.question_en.length <= 0 && this.state.question_rtl.length <= 0) {\n            alert('Either English or Urdu question statement is required');\n            return false;\n        }\n\n        const formData = new FormData();\n        for (let key in form_data) {\n            formData.append(key, form_data[key]);\n        }\n        formData.append('question_en', this.state.question_en);\n        formData.append('question_rtl', this.state.question_rtl);\n\n        this.props.addQuestion(formData, this.props.endpoint, this.props.type, this.props.index);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.submitForm} className=\"mb-4 sectionForm\" id={`sectionForm_${this.props.index}`}>\n                <input type=\"hidden\" value={this.props.form} name=\"section_info\" />\n\n                <div className=\"row\">\n                    <div className=\"form-group col-md-6 row\">\n                        <label className=\"col-lg-3 col-form-label\" htmlFor=\"priority\">Priority</label>\n                        <select className=\"custom-select col-lg-9\" name=\"priority\" id=\"priority\">\n                            <option value=\"exercise\">Exercise</option>\n                            <option value=\"past_paper\">Past Paper</option>\n                            <option value=\"additional\">Additional</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"form-group container-fluid\">\n                        <h4><label className=\"col-form-label col-lg-12\" htmlFor={`question_en_${this.props.index}`}>Question:</label></h4>\n                        <div className=\"col-lg-12\">\n                            <CKEditor\n                                editor={ClassicEditor}\n                                onChange={ ( event, editor ) => {\n                                    const data = editor.getData();\n                                    this.setState({question_en: data})\n                                }}\n                                config={ckEditor_config}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"form-group col-lg-12 container-fluid urdu-font\">\n                        <h4><label className=\"col-lg-12 col-form-label text-align-right\" htmlFor={`question_rtl_${this.props.index}`}>:سوال</label></h4>\n                        <div className=\"col-lg-12\">\n                            <CKEditor\n                                editor={ClassicEditor}\n                                onChange={ ( event, editor ) => {\n                                    const data = editor.getData();\n                                    this.setState({question_rtl: data})\n                                }}\n                                config={ckEditor_rtl_config}\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                <p className=\"mt-3\"></p>\n\n                <div className=\"form-group row\">\n\n                    <div className=\"mx-auto col-lg-6 row\">\n                        <button className=\"btn btn-primary col-lg-5\" type=\"submit\" disabled={this.props.loading}>\n                            {this.props.loading ? 'Saving...' : 'Save'}\n                        </button>\n                        <button className=\"btn btn-danger col-lg-5\" type=\"button\" onClick={this.hideTopicForm}>\n                            Cancel\n                        </button>\n                    </div>\n\n                </div>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.questions.loading,\n        message: state.questions.message,\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addQuestion: (formData, endpoint, type, index) => dispatch(addQuestion(dispatch, formData, endpoint, type, index)),\n        hideForm: (index) => dispatch(hideQuestionForm(dispatch, index))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionForm);\n"],"sourceRoot":""}