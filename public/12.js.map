{"version":3,"sources":["webpack:///./resources/js/v1/Questions/components/general/listing/PMatchColumn.jsx"],"names":["PMatchColumn","props","prepareMcqQuestionData","bind","state","q","id","en","statement","columns","number","this","updateSelectedQuestions","key","type","only_display","selected_question","length","question_info","find","sq","questions_count","questions","allowed","total_allowed","checked","alert","formData","title","each_question_marks","ignore","question","form_type","setState","className","onClick","map","c","i","A","B","Fragment","translations","t","locale","Object","keys","question_statement","columnA","left_column_options","JSON","parse","columnB","right_column_options","k","push","Component","connect","dispatch"],"mappings":"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","file":"12.js","sourcesContent":["import React, { Component } from 'react';\nimport {removeQuestion, updateSelectedQuestions} from \"../../../redux/Actions\";\nimport {connect} from \"react-redux\";\n\nclass PMatchColumn extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.prepareMcqQuestionData = this.prepareMcqQuestionData.bind(this);\n\n        this.state = {\n            q: {\n                id: 0,\n                en: {\n                    statement: '',\n                    columns: [],\n                },\n            },\n            number: 0\n        }\n    }\n\n    componentDidMount() {\n        this.prepareMcqQuestionData();\n        this.updateSelectedQuestions = this.updateSelectedQuestions.bind(this);\n    }\n\n    updateSelectedQuestions() {\n        const key =  this.props.type;\n\n        if(this.props.only_display) {\n            return false;\n        }\n\n        if(this.props.selected_question.length > 0) {\n            const question_info = this.props.selected_question.find(sq => sq.key == key);\n            const questions_count = question_info.questions ? question_info.questions.length : 0;\n            const allowed = this.props.total_allowed;\n            if(questions_count >= allowed && !this.state.q.checked) {\n                alert(`You can select maximum ${allowed} questions`);\n                return false;\n            }\n        }\n\n        const formData = {\n            key: key,\n            title: this.props.title,\n            each_question_marks: this.props.each_question_marks,\n            total_allowed: this.props.total_allowed,\n            ignore: this.props.ignore,\n            question: this.props.question,\n            form_type: this.props.form_type\n        };\n\n        this.props.updateSelectedQuestions(formData);\n\n        let checked = !this.state.q.checked;\n        let q = {\n            ...this.state.q,\n            checked: checked\n        };\n        this.setState({q})\n    }\n\n    render() {\n        let q = this.state.q;\n        let number = this.state.number;\n        return (\n            <div className={`mt-2 mb-2 col-sm-12 px-0 py-2 ${q.checked ? 'selected_question' : ''} question_row`} onClick={this.updateSelectedQuestions}>\n                <div className=\"col-lg-10\">\n                    <h5 className=\"mb-2\">{number}) {q.en.statement}</h5>\n                    <table className=\"table-bordered col-lg-6\">\n                        <tbody>\n                        {q.en.columns.length > 0 ?\n                            q.en.columns.map((c, i) => {\n                                return (\n                                    <tr>\n                                        <td className=\"py-2 pl-2\">{c.A}</td>\n                                        <td className=\"py-2 pl-2\">{c.B}</td>\n                                    </tr>\n                                )\n                            })\n                            : <React.Fragment></React.Fragment>\n                        }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n\n    prepareMcqQuestionData() {\n        let question = this.props.question;\n        let number = this.props.number;\n        if(question.length <= 0) return false;\n        if(typeof question.translations === typeof undefined) return false;\n\n        let q = this.state.q;\n        let i = 0, j = 1;\n        let t = question.translations.find(q => q.locale === 'en');\n        if(t && Object.keys(t).length <= 0) {\n            t = question.translations.find(q => q.locale === 'ur');\n        }\n\n        if(!t) return false;\n\n        q.id = question.id;\n        q.en.statement = t.question_statement;\n        let columnA = t.left_column_options.length > 0 ? JSON.parse(t.left_column_options) : [];\n        let columnB = t.right_column_options.length > 0 ? JSON.parse(t.right_column_options) : [];\n        for(let k=0; k < columnA.length; k++) {\n            q.en.columns.push({A: columnA[k], B: columnB[k]})\n        }\n        this.setState({q: q, number: number})\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        selected_question: state.questions.selected_question\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateSelectedQuestions: (formData) => dispatch(updateSelectedQuestions(dispatch, formData))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PMatchColumn);\n\n"],"sourceRoot":""}