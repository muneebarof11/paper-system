{"version":3,"sources":["webpack:///./resources/js/v1/Questions/components/general/listing/PMCQ.jsx"],"names":["PMCQ","props","state","q","id","checked","en","statement","options","rtl","number","prepareMcqQuestionData","bind","updateSelectedQuestions","this","key","type","only_display","selected_question","length","question_info","find","sq","questions_count","questions","allowed","total_allowed","alert","formData","title","each_question_marks","ignore","question","form_type","setState","displayRtl","Fragment","className","onClick","style","fontSize","questionFontSize","map","o","i","optionsFontSize","dangerouslySetInnerHTML","createMarkup","html","__html","translations","t","qt","locale","question_statement","filter","option","translation_id","correct_answer","buildOptions","$helper","getAlphabet","question_option","push","Component","connect","dispatch"],"mappings":"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","file":"11.js","sourcesContent":["import React, {Component} from 'react';\nimport {updateSelectedQuestions} from \"../../../redux/Actions\";\nimport {connect} from \"react-redux\";\n\nclass PMCQ extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            q: {\n                id: 0,\n                checked: false,\n                en: {\n                    statement: '',\n                    options: []\n                },\n                rtl: {\n                    statement: '',\n                    options: []\n                },\n                options: []\n            },\n            number: 0\n        };\n\n        this.prepareMcqQuestionData = this.prepareMcqQuestionData.bind(this);\n        this.updateSelectedQuestions = this.updateSelectedQuestions.bind(this);\n    }\n\n    componentDidMount() {\n        this.prepareMcqQuestionData();\n    }\n\n    updateSelectedQuestions() {\n        const key =  this.props.type;\n\n        if(this.props.only_display) {\n            return false;\n        }\n\n        if(this.props.selected_question.length > 0) {\n            const question_info = this.props.selected_question.find(sq => sq.key == key);\n            const questions_count = question_info.questions ? question_info.questions.length : 0;\n            const allowed = this.props.total_allowed;\n            if(questions_count >= allowed && !this.state.q.checked) {\n                alert(`You can select maximum ${allowed} questions`);\n                return false;\n            }\n        }\n\n        const formData = {\n            key: key,\n            title: this.props.title,\n            each_question_marks: this.props.each_question_marks,\n            total_allowed: this.props.total_allowed,\n            ignore: this.props.ignore,\n            question: this.props.question,\n            form_type: this.props.form_type\n        };\n\n        this.props.updateSelectedQuestions(formData);\n\n        let checked = !this.state.q.checked;\n        let q = {\n            ...this.state.q,\n            checked: checked\n        };\n        this.setState({q})\n    }\n\n    render() {\n        let q = this.state.q;\n        let number = this.state.number;\n        const displayRtl = q.rtl.statement.length > 0 ? '' : 'd-none';\n\n        return (\n            (q.en.statement.length <=0 && q.rtl.statement.length <0)\n                ? <React.Fragment /> :\n                <div className={`mt-2 mb-2 col-sm-12 px-0 py-2 ${q.checked ? 'selected_question' : ''} question_row mcq-question`} onClick={this.updateSelectedQuestions}>\n                    <div className=\"row col-sm-12 mx-0 px-0\">\n                        <div className=\"col-sm-6\">\n                            <h5 className={`mb-2`}\n                                style={{fontSize: this.props.questionFontSize}}\n                            >{number}) {q.en.statement}</h5>\n                        </div>\n                        <div className={`col-sm-6 urdu-font text-right ${displayRtl}`}>\n                            <h4 className=\"mb-2 text-right\"\n                                style={{fontSize: this.props.questionFontSize}}\n                            >{number})&nbsp;{q.rtl.statement}</h4>\n                        </div>\n                    </div>\n                    <div className=\"row col-sm-12 mx-0 px-0\">\n                        {q.options.length > 0 ?\n                            q.options.map((o, i) => {\n                                return (\n                                    <div className={`col-sm-3 mb-3`}  style={{fontSize: this.props.optionsFontSize}} dangerouslySetInnerHTML={this.createMarkup(o) }></div>\n                                )\n                            })\n                            : <React.Fragment></React.Fragment>\n                        }\n                    </div>\n                </div>\n        )\n    }\n\n    createMarkup(html) {\n        return {__html: `${html}`};\n    }\n\n    prepareMcqQuestionData() {\n        let question = this.props.question;\n        let number = this.props.number;\n        if (question.length <= 0) return false;\n        if (typeof question.translations === typeof undefined) return false;\n\n        let q = this.state.q;\n        let i = 0, j = 1;\n        let t = question.translations.find(qt => qt.locale === 'en');\n\n        if (t) {\n            q.en.statement = t.question_statement;\n            /**\n             * get options\n             */\n            q.en.options = t.options.filter(option => {\n                return option.translation_id == t.id;\n            });\n\n            q.en.correct_answer = t.correct_answer;\n        }\n\n        q.id = question.id;\n        /**\n         * loop through other language statement only if it exists\n         * English, Urdu & Isl (or some other) will not have this index\n         */\n        t = question.translations.find(q => q.locale === 'ur');\n        if (t) {\n            q.rtl.statement = t.question_statement;\n\n            q.rtl.options = t.options.filter(option => {\n                return option.translation_id == t.id;\n            });\n            q.rtl.correct_answer = t.correct_answer;\n        }\n\n        q.options = this.buildOptions(q);\n        this.setState({q: q, number: number});\n    }\n\n    buildOptions(q) {\n\n        if(q.en.options.length > 0 && q.rtl.options.length > 0) {\n            for(let i=0; i<=3; i++) {\n                let statement = '';\n\n                statement += ` (${$helper.getAlphabet(i)}) `;\n\n                if(q.en.options[i]) {\n                    statement += q.en.options[i].question_option;\n                }\n\n                if(q.rtl.options[i]) {\n                    statement += `<span class=\"px-4 urdu-font\">${q.rtl.options[i].question_option}</span>`;\n                }\n\n                q.options.push(statement);\n            }\n        } else if(q.en.options.length > 0) {\n            for(let i=0; i<=3; i++) {\n                let statement = '';\n\n                statement += ` (${$helper.getAlphabet(i)}) `;\n\n                if(q.en.options[i]) {\n                    statement += q.en.options[i].question_option;\n                }\n\n                q.options.push(statement);\n            }\n        } else if(q.rtl.options.length > 0) {\n            for(let i=0; i<=3; i++) {\n                let statement = '';\n\n                statement += ` (${$helper.getAlphabet(i)}) `;\n\n                if(q.rtl.options[i]) {\n                    statement += q.rtl.options[i].question_option;\n                }\n\n                q.options.push(statement);\n            }\n        }\n\n        return q.options;\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        selected_question: state.questions.selected_question\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateSelectedQuestions: (formData) => dispatch(updateSelectedQuestions(dispatch, formData))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PMCQ);\n\n"],"sourceRoot":""}