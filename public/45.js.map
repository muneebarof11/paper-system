{"version":3,"sources":["webpack:///./resources/js/v1/Questions/components/math/forms/QuestionForm.jsx"],"names":["QuestionForm","props","state","question_en","question_rtl","submitForm","bind","hideTopicForm","updateStatement","content","editor","window","confirm","this","hideForm","index","statement","type","setState","e","preventDefault","form_data","require","serialize","document","querySelector","hash","length","alert","formData","FormData","key","append","addQuestion","endpoint","onSubmit","className","id","value","form","name","htmlFor","ClassicEditor","onChange","event","data","getData","config","ckEditor_config","ckEditor_rtl_config","disabled","loading","onClick","Component","connect","questions","message","dispatch","hideQuestionForm"],"mappings":"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","file":"45.js","sourcesContent":["import React, { Component } from 'react';\nimport {addQuestion, hideQuestionForm} from \"../../../redux/Actions\";\nimport CKEditor from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from 'ckeditor5-classic-with-mathtype';\n\nimport {connect} from \"react-redux\";\nimport {ckEditor_config, ckEditor_rtl_config} from \"../../../../params\";\n\nclass QuestionForm extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            question_en: '',\n            question_rtl: '',\n        };\n\n        this.submitForm = this.submitForm.bind(this);\n        this.hideTopicForm = this.hideTopicForm.bind(this);\n        this.updateStatement = this.updateStatement.bind(this);\n    }\n\n    componentDidMount() {\n        // this.initCustomCkEditor();\n    }\n\n    handleEditorChange(content, editor) {\n    }\n\n    hideTopicForm() {\n        const confirmation = window.confirm('Are you sure you want to cancel?');\n        if (!confirmation) return false;\n\n        this.props.hideForm(this.props.index);\n    }\n\n    updateStatement(statement, type) {\n        if(type === 'en') {\n            this.setState({question_en: statement})\n        } else {\n            this.setState({question_rtl: statement})\n        }\n    }\n\n    submitForm(e) {\n        e.preventDefault();\n\n        const serialize = require('form-serialize');\n        let form = document.querySelector(`#sectionForm_${this.props.index}`);\n\n        let form_data = serialize(form, { hash: true });\n\n        if(this.state.question_en.length <= 0 && this.state.question_rtl.length <= 0) {\n            alert('Either English or Urdu question statement is required');\n            return false;\n        }\n\n        const formData = new FormData();\n        for (let key in form_data) {\n            formData.append(key, form_data[key]);\n        }\n        formData.append('question_en', this.state.question_en);\n        formData.append('question_rtl', this.state.question_rtl);\n\n        this.props.addQuestion(formData, this.props.endpoint, this.props.type, this.props.index);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.submitForm} className=\"mb-4 sectionForm\" id={`sectionForm_${this.props.index}`}>\n                <input type=\"hidden\" value={this.props.form} name=\"section_info\" />\n\n                <div className=\"row\">\n                    <div className=\"form-group col-md-6 row\">\n                        <label className=\"col-lg-3 col-form-label\" htmlFor=\"priority\">Priority</label>\n                        <select className=\"custom-select col-lg-9\" name=\"priority\" id=\"priority\">\n                            <option value=\"exercise\">Exercise</option>\n                            <option value=\"past_paper\">Past Paper</option>\n                            <option value=\"additional\">Additional</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"form-group container-fluid\">\n                        <h4><label className=\"col-form-label col-lg-12\" htmlFor={`question_en_${this.props.index}`}>Question:</label></h4>\n                        <div className=\"col-lg-12\">\n                            <CKEditor\n                                editor={ClassicEditor}\n                                onChange={ ( event, editor ) => {\n                                    const data = editor.getData();\n                                    this.setState({question_en: data})\n                                }}\n                                config={ckEditor_config}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"form-group col-lg-12 container-fluid urdu-font\">\n                        <h4><label className=\"col-lg-12 col-form-label text-align-right\" htmlFor={`question_rtl_${this.props.index}`}>:سوال</label></h4>\n                        <div className=\"col-lg-12\">\n                            <CKEditor\n                                editor={ClassicEditor}\n                                onChange={ ( event, editor ) => {\n                                    const data = editor.getData();\n                                    this.setState({question_rtl: data})\n                                }}\n                                config={ckEditor_rtl_config}\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                <p className=\"mt-3\"></p>\n\n                <div className=\"form-group row\">\n\n                    <div className=\"mx-auto col-lg-6 row\">\n                        <button className=\"btn btn-primary col-lg-5\" type=\"submit\" disabled={this.props.loading}>\n                            {this.props.loading ? 'Saving...' : 'Save'}\n                        </button>\n                        <button className=\"btn btn-danger col-lg-5\" type=\"button\" onClick={this.hideTopicForm}>\n                            Cancel\n                        </button>\n                    </div>\n\n                </div>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.questions.loading,\n        message: state.questions.message,\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addQuestion: (formData, endpoint, type, index) => dispatch(addQuestion(dispatch, formData, endpoint, type, index)),\n        hideForm: (index) => dispatch(hideQuestionForm(dispatch, index))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionForm);\n"],"sourceRoot":""}