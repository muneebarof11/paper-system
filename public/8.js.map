{"version":3,"sources":["webpack:///./resources/js/v1/Questions/components/english/listing/PEngMCQ.jsx"],"names":["PEngMCQ","props","state","q","id","en","statement","options","correct_answer","number","prepareMcqQuestionData","bind","updateSelectedQuestions","this","key","type","only_display","selected_question","length","question_info","find","sq","questions_count","questions","allowed","total_allowed","checked","alert","formData","title","each_question_marks","ignore","question","form_type","setState","Fragment","statement_len","className","onClick","map","o","i","$helper","getAlphabet","question_option","translations","t","locale","question_statement","indexOf","filter","option","translation_id","Component","connect","dispatch"],"mappings":"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","file":"8.js","sourcesContent":["import React, { Component } from 'react';\nimport {removeQuestion, updateSelectedQuestions} from \"../../../redux/Actions\";\nimport {connect} from \"react-redux\";\n\nclass PEngMCQ extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            q: {\n                id: 0,\n                en: {\n                    statement: '',\n                    options: [],\n                    correct_answer: ''\n                }\n            },\n            number: 0\n        };\n\n        this.prepareMcqQuestionData = this.prepareMcqQuestionData.bind(this);\n        this.updateSelectedQuestions = this.updateSelectedQuestions.bind(this);\n    }\n\n    componentDidMount() {\n        this.prepareMcqQuestionData();\n    }\n\n    updateSelectedQuestions() {\n        const key =  this.props.type;\n\n        if(this.props.only_display) {\n            return false;\n        }\n\n        if(this.props.selected_question.length > 0) {\n            const question_info = this.props.selected_question.find(sq => sq.key == key);\n            const questions_count = question_info.questions ? question_info.questions.length : 0;\n            const allowed = this.props.total_allowed;\n            if(questions_count >= allowed && !this.state.q.checked) {\n                alert(`You can select maximum ${allowed} questions`);\n                return false;\n            }\n        }\n\n        const formData = {\n            key: key,\n            title: this.props.title,\n            each_question_marks: this.props.each_question_marks,\n            total_allowed: this.props.total_allowed,\n            ignore: this.props.ignore,\n            question: this.props.question,\n            form_type: this.props.form_type\n        };\n\n        this.props.updateSelectedQuestions(formData);\n\n        let checked = !this.state.q.checked;\n        let q = {\n            ...this.state.q,\n            checked: checked\n        };\n        this.setState({q})\n    }\n\n    render() {\n        let q = this.state.q;\n        let number = this.state.number;\n\n        if(q.en.options.length <= 0) return <React.Fragment />;\n        const statement_len = q.en.statement.length <= 0;\n\n        return (\n            <div className={`mt-2 mb-2 col-sm-12 px-0 py-2 ${q.checked ? 'selected_question' : ''} question_row mcq-question`} onClick={this.updateSelectedQuestions}>                <div className=\"col-lg-11\">\n                    { !statement_len ? <h4 className={`mb-2`}>{number}) {q.en.statement}</h4> : <React.Fragment />}\n                    <div className=\"row\">\n                        { statement_len ? <div className=\"col-lg-1\"> {number})</div> : <React.Fragment /> }\n                        {q.en.options.length > 0 ?\n                            q.en.options.map((o, i) => {\n                                return (\n                                    <div className={statement_len ? `col-lg-2` : `col-lg-3`}>\n                                        <strong>{$helper.getAlphabet(i)})</strong> &nbsp;\n                                        {o.question_option}</div>\n                                )\n                            })\n                            : <React.Fragment></React.Fragment>\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    prepareMcqQuestionData() {\n        let question = this.props.question;\n        let number = this.props.number;\n        if(question.length <= 0) return false;\n        if(typeof question.translations === typeof undefined) return false;\n\n        let q = this.state.q;\n        let i = 0, j = 1;\n        let t = question.translations.find(q => q.locale === 'en');\n\n        // check its only urdu\n        if(t) {\n            q.en.statement = t.question_statement.indexOf(`!___!`) !== -1 ? '' : t.question_statement ;\n\n            q.en.correct_answer = t.correct_answer;\n            /**\n             * get options\n             */\n            q.en.options = t.options.filter(option => {\n                return option.translation_id == t.id;\n            });\n        }\n\n        q.id = question.id;\n\n        this.setState({q: q, number: number})\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        selected_question: state.questions.selected_question\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateSelectedQuestions: (formData) => dispatch(updateSelectedQuestions(dispatch, formData))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PEngMCQ);\n\n"],"sourceRoot":""}