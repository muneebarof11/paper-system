{"version":3,"sources":["webpack:///./resources/js/v1/Questions/components/math/listing/PMathMCQ.jsx"],"names":["require","MathMCQ","props","state","q","id","en","statement","options","rtl","number","prepareMcqQuestionData","bind","updateSelectedQuestions","this","key","type","only_display","selected_question","length","question_info","find","sq","questions_count","questions","allowed","total_allowed","checked","alert","formData","title","each_question_marks","ignore","question","form_type","setState","hide_eng","medium","className","onClick","math","map","o","i","$helper","getAlphabet","question_option","Fragment","translations","t","locale","question_statement","filter","option","translation_id","correct_answer","Component","connect","dispatch"],"mappings":"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","file":"15.js","sourcesContent":["import React, {Component} from 'react';\nimport {removeQuestion, updateSelectedQuestions} from \"../../../redux/Actions\";\nimport {connect} from \"react-redux\";\nimport MathJax from 'react-mathjax-preview'\n\nvar Latex = require('react-latex');\n\nclass MathMCQ extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            q: {\n                id: 0,\n                en: {\n                    statement: '',\n                    options: []\n                },\n                rtl: {\n                    statement: '',\n                    options: []\n                }\n            },\n            number: 0\n        };\n\n        this.prepareMcqQuestionData = this.prepareMcqQuestionData.bind(this);\n        this.updateSelectedQuestions = this.updateSelectedQuestions.bind(this);\n    }\n\n    componentDidMount() {\n        this.prepareMcqQuestionData();\n    }\n\n    updateSelectedQuestions() {\n        const key =  this.props.type;\n\n        if(this.props.only_display) {\n            return false;\n        }\n\n        if(this.props.selected_question.length > 0) {\n            const question_info = this.props.selected_question.find(sq => sq.key == key);\n            const questions_count = question_info.questions ? question_info.questions.length : 0;\n            const allowed = this.props.total_allowed;\n            if(questions_count >= allowed && !this.state.q.checked) {\n                alert(`You can select maximum ${allowed} questions`);\n                return false;\n            }\n        }\n\n        const formData = {\n            key: key,\n            title: this.props.title,\n            each_question_marks: this.props.each_question_marks,\n            total_allowed: this.props.total_allowed,\n            ignore: this.props.ignore,\n            question: this.props.question,\n            form_type: this.props.form_type\n        };\n\n        this.props.updateSelectedQuestions(formData);\n\n        let checked = !this.state.q.checked;\n        let q = {\n            ...this.state.q,\n            checked: checked\n        };\n        this.setState({q})\n    }\n\n    render() {\n        const q = this.state.q;\n        const number = this.state.number;\n        const hide_eng = this.props.medium === 'urdu';\n\n        return (\n            <div className={`mt-2 mb-2 col-sm-12 px-0 py-2 ${q.checked ? 'selected_question' : ''} question_row mcq-question`} onClick={this.updateSelectedQuestions}>\n                <div className={`col-lg-6 ${hide_eng ? 'd-none' : ''}`}>\n                    <h5 className={`mb-2`}>\n                        {number}) <MathJax math={q.en.statement} />\n                    </h5>\n                    <div className=\"row options-row\">\n                        {q.en.options.length > 0 ?\n                            q.en.options.map((o, i) => {\n                                return (\n                                    <div className={`col-lg-6`}>\n                                        <strong>{$helper.getAlphabet(i)})</strong> <MathJax math={`$${o.question_option}$`} />\n                                    </div>\n                                )\n                            })\n                            : <React.Fragment></React.Fragment>\n                        }\n                    </div>\n                </div>\n                <div className={`urdu-font text-right ${hide_eng ? 'col-lg-11' : 'col-lg-6'} ${q.rtl.statement.length > 0 ? '' : 'd-none' }`}>\n                    <h5 className=\"mb-2 text-right\">\n                        {number}) <MathJax math={q.rtl.statement} />\n                    </h5>\n                    <div className=\"row options-row\">\n                        {q.rtl.options.length > 0 ?\n                            q.rtl.options.map((o, i) => {\n                                return (\n                                    <div className={`col-lg-6 urdu-font text-right`}>\n                                        <strong>{$helper.getAlphabet(i)})</strong> <MathJax math={`$${o.question_option}$`} />\n                                    </div>\n                                )\n                            })\n                            : <React.Fragment></React.Fragment>\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    prepareMcqQuestionData() {\n        let question = this.props.question;\n        let number = this.props.number;\n        if(question.length <= 0) return false;\n        if(typeof question.translations === typeof undefined) return false;\n\n        let q = this.state.q;\n        let i = 0, j = 1;\n        let t = question.translations.find(q => q.locale === 'en');\n\n        q.id = question.id;\n\n        if(t) {\n            q.en.statement = t.question_statement;\n            q.en.options = t.options.filter(option => {\n                return option.translation_id == t.id;\n            });\n            q.en.correct_answer = t.correct_answer;\n        }\n\n        /**\n         * loop through other language statement only if it exists\n         * English, Urdu & Isl (or some other) will not have this index\n         */\n        t = question.translations.find(q => q.locale === 'ur');\n        if (t) {\n            q.rtl.statement = t.question_statement;\n            q.rtl.options = t.options.filter(option => {\n                return option.translation_id == t.id;\n            });\n        }\n\n        this.setState({q: q, number: number})\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        selected_question: state.questions.selected_question\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateSelectedQuestions: (formData) => dispatch(updateSelectedQuestions(dispatch, formData))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MathMCQ);\n\n"],"sourceRoot":""}